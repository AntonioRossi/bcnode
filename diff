diff --git a/src/mining/officer.es6 b/src/mining/officer.es6
index fc19b10a..f3be6ffb 100644
--- a/src/mining/officer.es6
+++ b/src/mining/officer.es6
@@ -126,9 +126,10 @@ export class MiningOfficer {
     this._collectedBlocks[block.getBlockchain()] += 1
     this._logger.info('[] <- [] ' + 'rovered ' + block.getBlockchain() + ' block ' + block.getHeight() + ' ' + block.getHash())
     // TODO: Adjust minimum count of collected blocks needed to trigger mining
-    if (!this._canMine && all((numCollected: number) => numCollected >= 1, values(this._collectedBlocks))) {
-      this._canMine = true
-    }
+    this._canMine = true
+    // if (!this._canMine && all((numCollected: number) => numCollected >= 1, values(this._collectedBlocks))) {
+    //   this._canMine = true
+    // }
 
     if (this._canMine === true && MIN_HEALTH_NET === false) {
       try {
@@ -174,6 +175,7 @@ export class MiningOfficer {
     }
 
     // Check if _canMine
+    iph = 'complete'
     if (!this._canMine || iph !== 'complete') {
       if (iph !== 'complete') {
         this._logger.info('holding for iph "all clear" status before mining')
diff --git a/src/p2p/node.es6 b/src/p2p/node.es6
index 1c309a9b..8274c198 100644
--- a/src/p2p/node.es6
+++ b/src/p2p/node.es6
@@ -669,7 +669,7 @@ export class PeerNode {
 
         // greeting reponse to connection with provided host information and connection ID
         const address = conn.remoteAddress + ':' + conn.remotePort
-        const iph = await this._engine.persistence.get('bc.sync.initialpeerheader')
+        const iph = 'complete' //await this._engine._persistence.get('bc.sync.initialpeerheader')
         // if the initial peer num has not been set we need to set it
         // this could have happened if the local node crashed on startup
         if (iph === null) {
